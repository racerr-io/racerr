name: Pipeline

on:
  pull_request:
  push:
    branches:
      - master

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@master
        with:
          fetch-depth: '0'

      - name: Set versioning strategy to major
        if: github.ref == 'refs/heads/master'
        uses: allenevans/set-env@master
        with:
          DEFAULT_BUMP: major

      - name: Set versioning strategy to minor
        if: github.ref != 'refs/heads/master'
        uses: allenevans/set-env@master
        with:
          DEFAULT_BUMP: minor

      - name: Create tag
        id: create_tag
        uses: anothrNick/github-tag-action@master
        env:
          RELEASE_BRANCHES: .*

      - name: Create release
        id: create_release
        uses: actions/create-release@master
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag }}
          release_name: ${{ steps.create_tag.outputs.new_tag }}
          body: This is a build of the game executed by the [pipeline](https://github.com/racerr-io/unity-core/actions/runs/${{ github.run_id }}).
          prerelease: ${{ github.ref != 'refs/heads/master' }}
    outputs:
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag: ${{ steps.create_tag.outputs.new_tag }}

  build:
    name: Build ${{ matrix.targetPlatform }}
    needs: create_release
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        targetPlatform:
          # Servers (special case, there can only be one)
          - Server
          # Clients
          - WebGL
    steps:
      - name: Checkout repository
        uses: actions/checkout@master
        with:
          lfs: true

      - name: Prepare Unity library cache
        uses: actions/cache@master
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}

      - name: Build server
        if: matrix.targetPlatform == 'Server'
        uses: webbertakken/unity-builder@master
        with:
          unityVersion: 2019.2.17f1
          targetPlatform: StandaloneLinux64
          buildMethod: Racerr.Editor.CICDPipeline.BuildProject
          customParameters: -buildOptions EnableHeadlessMode

      - name: Build client
        if: matrix.targetPlatform != 'Server'
        uses: webbertakken/unity-builder@master
        with:
          unityVersion: 2019.2.17f1
          targetPlatform: ${{ matrix.targetPlatform }}
          buildMethod: Racerr.Editor.CICDPipeline.BuildProject

      - name: Compress build artifact
        uses: montudor/action-zip@master
        with:
          args: zip -qq -r build.zip build

      - name: Upload build artifact to release
        uses: actions/upload-release-asset@master
        with:
          upload_url: ${{ needs.create_release.outputs.release_upload_url }}
          asset_path: build.zip
          asset_name: ${{ matrix.targetPlatform }}Build.zip
          asset_content_type: application/zip

      - name: Build and publish Docker image (staging)
        if: matrix.targetPlatform == 'Server' && github.ref != 'refs/heads/master'
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: docker.pkg.github.com/racerr-io/unity-core/racerr
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: docker.pkg.github.com
          tags: "${{ needs.create_release.outputs.tag }},staging"

      - name: Build and publish Docker image (production)
        if: matrix.targetPlatform == 'Server' && github.ref == 'refs/heads/master'
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: docker.pkg.github.com/racerr-io/unity-core/racerr
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: docker.pkg.github.com
          tags: "${{ needs.create_release.outputs.tag }},prod"