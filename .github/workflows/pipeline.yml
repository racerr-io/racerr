name: Pipeline

on:
  pull_request:
  push:
    branches:
      - master

env:
  NODE_VERSION: 20.12.2 # Keep in sync with aws-cdk/.nvmrc
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ap-southeast-2

jobs:
  determine_build_environment:
    name: Determine build environment
    runs-on: ubuntu-latest
    steps:
      - name: Set environment as production
        if: github.ref == 'refs/heads/master'
        uses: allenevans/set-env@v2.0.0
        with:
          BUILD_ENV: prod

      - name: Set environment as staging
        # if: github.ref != 'refs/heads/master' # Force everything to be staging for now.
        uses: allenevans/set-env@v2.0.0
        with:
          BUILD_ENV: stg
    outputs:
      build_env: ${{ env.BUILD_ENV }}

  build_and_deploy_server:
    name: Build and deploy server
    needs: determine_build_environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          lfs: true

      - name: Prepare Unity library cache
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-Server-2

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build game
        uses: game-ci/unity-builder@v2
        with:
          unityVersion: 2020.3.12f1
          targetPlatform: StandaloneLinux64
          buildMethod: Racerr.Editor.CICDPipeline.BuildProject
          customParameters: -buildOptions EnableHeadlessMode
          versioning: None

      - name: Authenticate Docker
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Docker metadata
        id: docker_metadata
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/${{ github.repository }}-${{ needs.determine_build_environment.outputs.build_env }}
          flavor: latest=true

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.docker_metadata.outputs.tags }}
          labels: ${{ steps.docker_metadata.outputs.labels }}

      - name: Deploy to AWS
        run: |
          mkdir -p build/WebGL/WebGL
          cd aws-cdk
          npm ci
          npm run cdk -- deploy racerr-server-stack --require-approval never

  build_and_deploy_webgl_client:
    name: Build and deploy WebGL client
    needs: determine_build_environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          lfs: true

      - name: Prepare Unity library cache
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-WebGL-2

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build game
        uses: game-ci/unity-builder@v2
        with:
          unityVersion: 2020.3.12f1
          targetPlatform: WebGL
          buildMethod: Racerr.Editor.CICDPipeline.BuildProject
          versioning: None

      - name: Deploy to AWS
        run: |
          cd aws-cdk
          npm ci
          npm run cdk -- deploy racerr-client-stack --require-approval never
