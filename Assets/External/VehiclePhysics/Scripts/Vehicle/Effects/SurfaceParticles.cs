using UnityEngine;
using System.Collections;
using System.Collections.Generic;

namespace NWH.VehiclePhysics
{
    /// <summary>
    /// Skid smoke and surface dust generated by wheel slipping / rolling over the surface.
    /// </summary>
    [System.Serializable]
    public class SurfaceParticles
    {
        public ParticleSystem smoke;
        public ParticleSystem dust;

        public GameObject smokeGo;
        public GameObject dustGo;

        private float smokeEmissionRate;
        private float smokeEmissionRateVelocity;
        private float dustEmissionRate;

        private float forwardSmokeCoeff = 10f;
        private float sideSmokeCoeff = 10f;

        private VehicleController vc;
        private Wheel wheel;

        private GroundDetection.GroundEntity groundEntity;
        private GroundDetection.GroundEntity prevGroundEntity;


        public void Initialize(VehicleController vc, Wheel wheel)
        {
            this.vc = vc;
            this.wheel = wheel;

            // Initialize skid smoke
            if(vc.groundDetection.smokePrefab != null)
            {
                smokeGo = GameObject.Instantiate(vc.groundDetection.smokePrefab);
                smokeGo.transform.parent = wheel.ControllerTransform;
                smokeGo.transform.position = wheel.VisualTransform.position - wheel.VisualTransform.up * wheel.Radius
                    + vc.transform.forward * wheel.Radius;
                smoke = smokeGo.GetComponent<ParticleSystem>();

                var shape = smoke.shape;
                shape.radius = wheel.Width * 1.5f;
            }
            else
            {
                Debug.LogWarning("Smoke Prefab is null, wheel slip will not produce smoke.");
            }

            // Initialize ground dust
            if (vc.groundDetection.dustPrefab != null)
            {
                dustGo = GameObject.Instantiate(vc.groundDetection.dustPrefab);
                dustGo.transform.parent = wheel.ControllerTransform;
                dustGo.transform.position = wheel.VisualTransform.position;
                dust = dustGo.GetComponent<ParticleSystem>();
            }
            else
            {
                Debug.LogWarning("Dust Prefab is null, there will be no surface dust.");
            }
        }

        public void Update()
        {
            groundEntity = vc.groundDetection.GetCurrentGroundEntity(wheel.WheelController);

            // Update skid smoke
            if (smoke != null)
            {
                float forwardSmokeStrength = Mathf.Clamp01(wheel.ForwardSlip - vc.forwardSlipThreshold) * forwardSmokeCoeff;
                float sideSmokeStrength = Mathf.Clamp01(wheel.SideSlip - vc.sideSlipThreshold * 3f) * sideSmokeCoeff;

                if(wheel.SmoothRPM < 100f)
                {
                    forwardSmokeStrength = 0;
                }

                float newSmokeEmissionRate = 0f;
                if(groundEntity != null && wheel.IsGrounded && (wheel.HasForwardSlip || wheel.HasSideSlip) && prevGroundEntity == groundEntity)
                {
                    newSmokeEmissionRate = groundEntity.smokeIntensity * Mathf.Clamp01(forwardSmokeStrength + sideSmokeStrength);
                    smokeEmissionRate = Mathf.SmoothDamp(smokeEmissionRate, newSmokeEmissionRate, ref smokeEmissionRateVelocity, 4f);
                }
                else
                {
                    smokeEmissionRate = newSmokeEmissionRate;
                }

                float distanceBias = Mathf.Clamp01(Mathf.Abs(vc.ForwardVelocity) / 3f);
                var smokeEmission = smoke.emission;
                smokeEmission.rateOverDistance = distanceBias * smokeEmissionRate;
                smokeEmission.rateOverTime = (1f - distanceBias) * smokeEmissionRate;
            }

            // Update ground dust
            if (dust != null)
            {
                var dustEmission = dust.emission;
                if (groundEntity != null)
                {
                    dustEmissionRate = 0f;
                    if (wheel.IsGrounded)
                    {
                        dustEmissionRate = Mathf.Clamp01(vc.Speed / 12f);
                        var main = dust.main;
                        main.startColor = groundEntity.dustColor;
                    }

                    dustEmission.rateOverDistance = dustEmissionRate * groundEntity.dustIntensity * 0.1f;
                }
                else
                {
                    dustEmission.rateOverDistance = 0f;
                }
            }

            prevGroundEntity = groundEntity;
        }
    }
}